# ============================
# lf Configuration Settings
# ============================

# Set colors & icons
set icons
set colors

# Fuzzy search options:
set findlen 0              # Allow matching with minimal typed characters
set anchorfind false       # Search arbitrarily rather than only from the beginning
set incsearch true         # Incremental search: jump to current match at each keystroke
set incfilter true		   # Incremental filter: filter to current match at each keystroke

# Visual enhancements:
set drawbox                # Enable drawing a border around selected items
set roundbox               # Enable rounded borders

# Image preview:
set sixel                 # Enable rendering sixel images in previewer

# Sorting & filesystem watch:
set sortby natural        # Use natural sorting on launch
set watch                 # Enable filesystem notifications for changes

# Directory-specific sorting rules:
setlocal '/path/to/file' sortby time

# Scrolling offset:
set scrolloff 10          # Leave some space at the top and bottom

# Previewer and cleaner script paths:
set previewer '~/.config/lf/previewer'
set cleaner '~/.config/lf/cleaner'

# Cursor formatting for different panes:
set cursorparentfmt "\033[3;90m"
set cursoractivefmt "\033[7m"
set cursorpreviewfmt "\033[3;90m"

# Shell command interpreter settings:
set shell zsh             # Use zsh as the shell for executing commands
set shellopts '-euy'      # Exit on error (-e), unset variable error (-u), and treat failures as errors (-y)
set ifs "\n"               # Set the internal field separator to newline

# ============================
# CUSTOM COMMANDS
# ============================

# 'open' command for non-directory files:
cmd open ${{
    # Resolve symbolic links
    test -L $f && f=$(readlink -f $f)
    # Determine MIME type and choose an appropriate opener:
    case $(file --mime-type $f -b) in
        application/pdf)
            setsid -f zathura $fx ;;
        text/*)
            case $f in
                *.md) glow --width 100 --pager $f;;
                *) $EDITOR $f ;;
            esac ;;
        image/*)
            setsid -f nomacs $f >/dev/null 2>&1 ;;
        video/*)
            setsid -f mpv --keep-open $f -quiet >/dev/null 2>&1 ;;
        audio/*)
            setsid -f ffplay -nodisp -autoexit $f >/dev/null 2>&1 ;;
        *)
            # For any other MIME types, open with the default opener for each file in $fx
            for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done ;;
    esac
}}

# 'extract' command: Extract archives into a temporary directory, then remove it.
cmd extract &{{
    set -f
    mkdir $1
    cp -rf $f $1
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2)
            tar xjvf $f >/dev/null 2>&1 ;;
        *.tar.gz|*.tgz)
            tar xzvf $f >/dev/null 2>&1 ;;
        *.tar.xz|*.txz)
            tar xJvf $f >/dev/null 2>&1 ;;
        *.zip)
            unzip $f >/dev/null 2>&1 ;;
        *.rar)
            unrar x $f >/dev/null 2>&1 ;;
        *.7z)
            7z x $f >/dev/null 2>&1 ;;
    esac
    rm -rf $1
}}

# 'tar' command: Compress current or selected files into a tar.gz archive.
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1 >/dev/null 2>&1
    rm -rf $1
}}

# 'zip' command: Compress current or selected files into a zip archive.
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1 >/dev/null 2>&1
    rm -rf $1
}}

# fzf-based file search:
cmd fzf_find ${{
    result=$(fzf --ansi --header="Search file to edit" --delimiter=: \
             --preview='~/.config/lf/cleaner; ~/.config/lf/previewer {1}' \
             --preview-window='up,65%') && [ -n "$result" ] && $EDITOR "$result" || true
}}

# ZOXIDE INTEGRATION
## Jump to directories using zoxide:
cmd z %{{
    result="$(zoxide query --exclude "$PWD" "$@" | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}
cmd zi ${{
    result="$(zoxide query -i | sed 's/\\/\\\\/g;s/"/\\"/g')"
    lf -remote "send $id cd \"$result\""
}}
cmd on-cd &{{
    zoxide add "$PWD"
}}

# FZF X RIPGREP
cmd fzf_ripgrep ${{
    cmd="rg --column --line-number --no-heading --color=always --smart-case"
    fzf --ansi --disabled --layout=reverse --header="Search in files" --delimiter=: \
        --no-scrollbar \
        --padding 2% \
        --bind="start:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind="change:reload([ -n {q} ] && $cmd -- {q} || true)" \
        --bind='enter:become(lf -remote "send $id select \"$(printf "%s" {1} | sed '\''s/\\/\\\\/g;s/"/\\"/g'\'')\"")' \
        --preview='~/.config/lf/cleaner; ~/.config/lf/previewer {1}' \
        --preview-window='up,65%' \
        || true
}}

# ============================
# KEYBINDINGS
# ============================

# Archive operations:
map xe extract $f
map xt push :tar<space>
map xz push :zip<space>

# Folder shortcuts:
map g/ select /
map gc cd ~/.config
map gb cd ~/.local/bin
map gd cd ~/Downloads
map gp cd ~/Pictures

# Sorting: Toggle sort by ctime in reverse order:
map sf :{{ set sortby ctime; set reverse; }}

# Create folder/file shortcuts:
map a push %mkdir<space>		# Create folder
map u push %touch<space>		# Create file

# Use Enter to run shell commands:
map <enter> shell

# Execute current file (if executable):
map x$ $$f
map x! !$f

# File opener keys:
map o &mimeopen $f
map O $mimeopen --ask $f

# Delete command:
map <delete> delete

# Fzf-find keybind:
map f fzf_find

# Zoxide integration keybind:
map zi zi
map gz z

# FZF x RIPGREP keybind:
map gs :fzf_ripgrep
