# Set colors & icons
set icons

# To enable border
set drawbox

# Render sixel image in previewer
set sixel

# Set sort on launch
set sortby natural

# Leave some space at the top and the bottom of the screen
set scrolloff 10

# Set previewer & cleaner script
set previewer '~/.config/lf/lf_kitty_preview'
set cleaner '~/.config/lf/lf_kitty_clean'

# To change the cursor in the respective panes
set cursorparentfmt "\033[3;90m"
set cursoractivefmt "\033[7m"
set cursorpreviewfmt "\033[3;90m"

# Interpreter for shell commands
set shell zsh

# Set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-euy'

# Set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# CUSTOM COMMANDS
# Define a custom 'open' command for non-directory files
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
		application/pdf) setsid -f zathura $fx ;;
        text/*)
            case $f in
                *.md) glow --width 100 --pager $f ;;
                *) $EDITOR $f ;;
            esac;;
        image/*) setsid -f nomacs $f >/dev/null 2>&1 ;;
		video/*) setsid -f mpv --keep-open $f -quiet >/dev/null 2>&1 ;;
		audio/*) setsid -f ffplay -nodisp -autoexit $f >/dev/null 2>&1 ;;
	*) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done ;;
    esac
}}

# Extract the current file with the right command
cmd extract ${{
    set -f
    mkdir $1
    cp -rf $fx $1
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f >/dev/null 2>&1 ;;
        *.tar.gz|*.tgz) tar xzvf $f >/dev/null 2>&1 ;;
        *.tar.xz|*.txz) tar xJvf $f >/dev/null 2>&1 ;;
        *.zip) unzip $f >/dev/null 2>&1 ;;
        *.rar) unrar x $f >/dev/null 2>&1 ;;
        *.7z) 7z x $f >/dev/null 2>&1 ;;
    esac
    rm -rf $1
}}

# Compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1 >/dev/null 2>&1
    rm -rf $1
}}

# Compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1 >/dev/null 2>&1
    rm -rf $1
}}

# MAPS
# Compress/decompress file
map xe extract $f
map xt push :tar<space>
map xz push :zip<space>

# Shortcut to folders
map g/ select /
map gc cd ~/.config
map gb cd ~/.local/bin
map gd cd ~/Downloads

# Set the ctime decrementally
map sf :{{ set sortby ctime; set reverse; }}

# Create folder
map a push %mkdir<space>

# Use enter for shell commands
map <enter> shell

# Execute current file (must be executable)
map x$ $$f
map x! !$f

# Dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# Use '<delete>' key for either 'trash' or 'delete' command
map <delete> delete
